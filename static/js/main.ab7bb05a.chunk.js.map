{"version":3,"sources":["components/Logo/Logo.js","components/SearchBar/SearchBar.js","components/CompareInput/CompareInput.js","components/SinglePokemon/SinglePokemon.js","components/PokemonList/PokemonList.js","components/MainPage/MainPage.js","components/SinglePokemonView/SinglePokemonView.js","components/PokemonComparison/PokemonComparison.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Logo","react_default","a","createElement","react","className","SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeHandler","event","setState","defineProperty","target","name","value","searchPokemon","onSearch","state","inputFilter","prevProps","prevState","length","_this2","type","placeholder","onChange","onKeyPress","key","onClick","React","Component","CompareInput","checkPokemon","pokemonId","onCheck","isChecked","SinglePokemon","enterHandler","mouseEnter","leaveHandler","checkedHandler","_this$props","pokemon","_this$state","splitedUrl","url","split","style","textTransform","onMouseEnter","onMouseLeave","Link","to","concat","components_CompareInput_CompareInput","PokemonList","compareButton","checkedPokemons","includes","filter","id","toConsumableArray","pokemons","children","map","index","components_SinglePokemon_SinglePokemon","MainPage","filterPokemons","trim","cachedPokemons","filteredPokemons","toLowerCase","isLoading","currentPage","currentUrl","getPokemons","pageChange","requestUrl","fetch","then","response","ok","json","data","results","_this3","components_SearchBar_SearchBar","components_PokemonList_PokemonList","previous","disabled","next","SinglePokemonView","showStats","loadStats","hideStats","shouldRender","match","params","height","sprites","front_default","src","alt","types","elem","base_experience","display","textAlign","stats","stat","base_stat","effort","PokemonComparison","getFirstPokemon","pokemonId1","data1","pokemon1","isLoading1","getSecondPokemon","pokemonId2","data2","pokemon2","isLoading2","poke1","poke2","App","components_Logo_Logo","HashRouter","Switch","Route","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ab7bb05a.chunk.js","sourcesContent":["import React, {Fragment} from 'react';\nimport \"./_Logo.scss\";\n\nconst Logo = () => (\n    <Fragment>\n            <div className='logo logo_background'>\n                <p className='logo logo_text'>Gonna find'em all!</p>\n            </div>\n    </Fragment>\n);\n\nexport default Logo;\n","import React from 'react';\nimport '../App/_colors.scss';\nimport \"./_SearchBar.scss\";\nimport PropTypes from \"prop-types\";\n\nclass SearchBar extends React.Component {\n    static propTypes = {\n        onSearch: PropTypes.func\n    };\n\n    constructor(props) {\n        super (props);\n        this.state = {\n            inputFilter: ''\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.inputFilter.length > 0 && this.state.inputFilter.length === 0) {\n            this.searchPokemon();\n        }\n    }\n\n    changeHandler = (event) => {\n      this.setState({\n          [event.target.name]: event.target.value\n      })\n    };\n\n    searchPokemon = () => {\n        this.props.onSearch(this.state.inputFilter);\n    };\n\n    render() {\n        return (\n            <div className='search_bar'>\n                <input\n                    type='text'\n                    className='search searchInput'\n                    placeholder='type pokemon name'\n                    onChange={this.changeHandler}\n                    name='inputFilter'\n                    value={this.state.inputFilter}\n                    onKeyPress={event => {\n                        if (event.key === \"Enter\") {\n                            this.searchPokemon();\n                        }\n                    }}/>\n                <button\n                    className='search searchButton'\n                    type='submit'\n                    onClick={this.searchPokemon}>GO!<div className='button_img'/></button>\n            </div>\n        )\n    }\n}\n\nexport default SearchBar;","import React, {Fragment} from 'react';\nimport './_CompareInput.scss';\n\nclass CompareInput extends React.Component {\n\n    changeHandler = () => {\n        this.props.checkPokemon(this.props.pokemonId);\n        this.props.onCheck(this.props.isChecked)\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <label>\n                    <input type='checkbox' value='compare' onChange={this.changeHandler}/>\n                    compare\n                </label>\n            </Fragment>\n        )\n    }\n}\n\nexport default CompareInput;\n\n","import React from 'react';\nimport './_SinglePokemon.scss';\nimport {Link} from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport CompareInput from '../CompareInput/CompareInput';\n\nclass SinglePokemon extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mouseEnter: false,\n            isChecked: false\n        }\n    }\n\n    enterHandler = () => {\n        this.setState({\n            mouseEnter: true\n        })\n    };\n\n    leaveHandler = () => {\n        this.setState({\n            mouseEnter: false\n        })\n    };\n\n    checkedHandler = () => {\n        this.setState({\n            isChecked: true\n        })\n    };\n\n    render() {\n        const {pokemon, checkPokemon} = this.props;\n        const {mouseEnter, isChecked} = this.state;\n        const splitedUrl = pokemon.url.split(\"/\");\n        const pokemonId = splitedUrl[splitedUrl.length - 2];\n        return (\n            <li className='singlePokemon'\n                style={{textTransform: 'uppercase'}}\n                onMouseEnter={this.enterHandler}\n                onMouseLeave={this.leaveHandler}>\n                <Link to={`/pokemon/${pokemonId}`}>{pokemon.name}</Link>\n                {mouseEnter || isChecked ?\n                    <CompareInput pokemonId={pokemonId}\n                                  checkPokemon={checkPokemon}\n                                  onCheck={this.checkedHandler}/>\n                : null}\n            </li>\n        )\n    }\n}\n\nSinglePokemon.propTypes = {\n    pokemon: PropTypes.object\n};\n\nexport default SinglePokemon;\n\n","import React, {Fragment} from 'react';\nimport './_PokemonList.scss'\nimport SinglePokemon from \"../SinglePokemon/SinglePokemon\";\nimport PropTypes from \"prop-types\";\nimport {Link} from \"react-router-dom\";\n\nclass PokemonList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            checkedPokemons: []\n        }\n    }\n\n    compareButton = pokemonId => {\n        if(this.state.checkedPokemons.includes(pokemonId)) {\n            this.setState({\n                checkedPokemons: this.state.checkedPokemons.filter(id => id!== pokemonId)\n            })\n        } else if (this.state.checkedPokemons.length < 2) {\n            this.setState({\n                checkedPokemons: [...this.state.checkedPokemons, pokemonId]\n            })\n        }\n    };\n\n    render() {\n        const {pokemons, children} = this.props;\n        const {checkedPokemons} = this.state;\n        return (\n            pokemons.length > 0 ? (\n                <Fragment>\n                    {checkedPokemons.length === 2 ? (<Link to={`/compare/${checkedPokemons[0]}/${checkedPokemons[1]}`}>\n                        <button className='compare_button' onClick={this.compareButton}>COMPARE</button>\n                    </Link>) : null}\n                    <ul className='pokemons'>\n                        {pokemons.map((pokemon, index) => (\n                            <SinglePokemon key={index} pokemon={pokemon} index={index} checkPokemon={this.compareButton}/>\n                        ))}\n                    </ul>\n                    {children}\n                </Fragment>\n            ) : (\n                <div className='pkmns_not_found'>\n                    <span>Pokemons not found</span>\n                    <div className='mad_pikachu'/>\n                </div>\n            )\n        );\n    }\n}\n\nPokemonList.propTypes = {\n    pokemons: PropTypes.array,\n    checkedPokemons: PropTypes.array\n};\n\nexport default PokemonList;","import React, {Fragment} from 'react';\nimport SearchBar from '../SearchBar/SearchBar';\nimport PokemonList from '../PokemonList/PokemonList';\nimport './_MainPage.scss'\n\nclass MainPage extends React.Component {\n    constructor(props) {\n        super (props);\n        this.state = {\n            pokemons: [],\n            cachedPokemons: [],\n            isLoading: true,\n            currentPage: 1,\n            currentUrl: ''\n        }\n    }\n\n    componentDidMount() {\n        this.getPokemons()\n    }\n\n    getPokemons(url, pageChange) {\n        let requestUrl = '';\n        if (url) {\n            requestUrl = url;\n            this.setState({\n                currentPage: this.state.currentPage + pageChange\n            })\n        } else {\n            requestUrl = 'https://pokeapi.co/api/v2/pokemon/?limit=73&offset=0'\n        }\n        this.setState({\n            isLoading: true\n        });\n        fetch(requestUrl).then(\n            response => {\n                if (response.ok) {\n                    return response.json();\n                }\n            })\n            .then(data => {\n                this.setState({\n                    pokemons: data.results,\n                    cachedPokemons: data.results,\n                    isLoading: false,\n                    currentUrl: data\n                });\n            })\n    }\n\n    filterPokemons = inputFilter => {\n        if (inputFilter.trim().length === 0) {\n            this.setState({pokemons: this.state.cachedPokemons});\n        } else {\n            const filteredPokemons = this.state.cachedPokemons.filter(pokemon =>\n                pokemon.name\n                    .toLowerCase()\n                    .trim()\n                    .includes(inputFilter.toLowerCase().trim())\n            );\n            this.setState({\n                pokemons: filteredPokemons\n            });\n        }\n    };\n\n    render(){\n        const {pokemons, isLoading, currentPage, currentUrl} = this.state;\n        if(isLoading){\n            return <div id='loadingScreen'>Loading...</div>;\n        }\n        return(\n            <Fragment>\n                <SearchBar onSearch={this.filterPokemons}/>\n                <PokemonList pokemons={pokemons}>\n                    <div className='buttons'>\n                        <button className='previous_btn button'\n                                onClick={() => this.getPokemons(currentUrl.previous,-1)}\n                                disabled={currentPage === 1}\n                                >Previous</button>\n                        <p>-{currentPage}-</p>\n                        <button className='next_btn button'\n                                onClick={() => this.getPokemons(currentUrl.next,+1)}\n                                disabled={currentPage === 13}\n                                >Next</button>\n                    </div>\n                </PokemonList>\n            </Fragment>\n        )\n    }\n}\n\nexport default MainPage;","import React from 'react';\nimport './_SinglePokemonView.scss'\n\nclass SinglePokemonView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pokemon: '',\n            shouldRender: false,\n            loadStats: false\n        }\n    }\n\n    componentDidMount() {\n        fetch(`https://pokeapi.co/api/v2/pokemon/${this.props.match.params.pokemonId}`)\n            .then(response => {\n                if (response.ok) {\n                    return response.json();\n                }\n            })\n            .then(data => {\n                this.setState({\n                    pokemon: data,\n                    shouldRender: true\n                })\n            })\n    }\n\n    showStats = () => {\n        this.setState({\n            loadStats: true\n        })\n    };\n\n    hideStats = () => {\n        this.setState({\n            loadStats: false\n        })\n    };\n\n    render() {\n        const {pokemon, shouldRender, loadStats} = this.state;\n        if(!shouldRender){\n            return <div id='loadingScreen'>Loading...</div>;\n        }\n        return (\n            <div className='single_pokemon_view_container'>\n                <div className='single_pokemon_view'\n                    style={{\n                        height: loadStats ? '400px' : '300px'\n                    }}>\n                    {pokemon.sprites.front_default !== null ?\n                        (<img src={pokemon.sprites.front_default} alt='pokemon_img'/>)\n                    : <div className='no_image'/>}\n\n                    <div className='properties_list' >\n                        <p className='pokemon_name'>{pokemon.name}</p>\n                        <p>{pokemon.types.length > 1 ? 'Types: ' : 'Type: ' }\n                        {pokemon.types.map((elem, index) => {\n                            return <span key={index}\n                                         style={{textTransform: 'uppercase'}}\n                            >{elem.type.name}&nbsp;</span>\n                        })} </p>\n                        <p>Base experience: {pokemon.base_experience}</p>\n                        <button className='show_stats_btn' onClick={this.showStats}\n                        style={{\n                            display: loadStats ? 'none' : 'block'\n                        }}>Show stats</button>\n                    </div>\n                    <div className='stats_list'>\n                        {(loadStats) ? (\n                            <table>\n                                <thead>\n                                    <tr>\n                                        <td style={{textAlign: 'left'}}>Name</td>\n                                        <td>Base</td>\n                                        <td >Effort</td>\n                                    </tr>\n                                </thead>\n                                {pokemon.stats.map((elem, index) =>\n                                    <tbody key={index}>\n                                        <tr>\n                                            <td style={{textAlign: 'left'}}>{elem.stat.name}</td>\n                                            <td>{elem.base_stat}</td>\n                                            <td>{elem.effort}</td>\n                                        </tr>\n                                    </tbody>\n                                )}\n                            </table>\n                        ) : null\n                        }\n                    </div>\n                    {(loadStats ? <button className='hide_stats_btn' onClick={this.hideStats}>HIDE</button> : null)}\n\n                </div>\n            </div>\n        )\n\n    }\n}\nexport default SinglePokemonView;","import React, {Fragment} from 'react';\nimport './_PokemonComparison.scss';\nimport {Link} from \"react-router-dom\";\n\nclass PokemonComparison extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            pokemon1: '',\n            pokemon2: '',\n            isLoading1: true,\n            isLoading2: true\n        }\n    }\n\n    componentDidMount() {\n        this.getFirstPokemon();\n        this.getSecondPokemon();\n    }\n\n    getFirstPokemon = () => {\n        fetch(`https://pokeapi.co/api/v2/pokemon/${this.props.match.params.pokemonId1}`).then(\n            response => {\n                if (response.ok) {\n                    return response.json()\n                }\n                }).then(data1 => {\n                this.setState({\n                    pokemon1: data1,\n                    isLoading1: false\n                });\n        });\n    };\n\n    getSecondPokemon = () => {\n        fetch(`https://pokeapi.co/api/v2/pokemon/${this.props.match.params.pokemonId2}`).then(\n            response => {\n                if (response.ok) {\n                    return response.json()\n                }\n                }).then(data2 => {\n                this.setState({\n                    pokemon2: data2,\n                    isLoading2: false\n                });\n        });\n    };\n\n\n    render() {\n        const {pokemon1, pokemon2, isLoading1, isLoading2} = this.state;\n        if (isLoading1 && isLoading2) {\n            return <div className='loadingScreen'>Loading...</div>;\n        }\n        if (!isLoading1 && !isLoading2) {\n            return (\n                <Fragment>\n                    <Link to={'/'}>\n                        <button className='back_btn'>BACK</button>\n                    </Link>\n                    <div className='pokemon_comparison'>\n                        <div className='first_pokemon'>\n                            <h2 style={{textTransform: 'uppercase'}}>{pokemon1.name}</h2>\n                            {pokemon1.sprites.front_default !== null ?\n                                (<img src={pokemon1.sprites.front_default} alt='pokemon1_img'/>)\n                                :  <div/>}\n                            <p> {pokemon1.types.length > 1 ? 'Types: ' : 'Type: '}\n                                {pokemon1.types.map((elem, index) => {\n                                    return <span key={index}\n                                                 style={{textTransform: 'uppercase'}}\n                                    >{elem.type.name}&nbsp;</span>\n                                })}\n                            </p>\n                            <p>Base experience: {pokemon1.base_experience}</p>\n                        </div>\n                        <div className='second_pokemon'>\n                            <h2 style={{textTransform: 'uppercase'}}>{pokemon2.name}</h2>\n                            {pokemon2.sprites.front_default !== null ?\n                                (<img src={pokemon2.sprites.front_default} alt='pokemon1_img'/>)\n                                :  <div/>}\n                            <p> {pokemon2.types.length > 1 ? 'Types: ' : 'Type: '}\n                                {pokemon2.types.map((elem, index) => {\n                                    return <span key={index}\n                                                 style={{textTransform: 'uppercase'}}\n                                    >{elem.type.name}&nbsp;</span>\n                                })}\n                            </p>\n                            <p>Base experience: {pokemon2.base_experience}</p>\n                        </div>\n                        <div className='stats_list'>\n                            <table className='stats_table'>\n                                <thead>\n                                    <tr>\n                                        <td>STATS</td>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {pokemon1.stats.map((poke1, index) =>\n                                        <tr key={index}>\n                                            <td>{poke1.stat.name}</td>\n                                        </tr>)}\n                                </tbody>\n                            </table>\n                            <table>\n                                <thead>\n                                <tr>\n                                    <td>Base<br/><span>{pokemon1.name}</span></td>\n                                    <td>Effort<br/><span>{pokemon1.name}</span></td>\n                                </tr>\n                                </thead>\n                                <tbody>\n                                {pokemon1.stats.map((poke1, index) =>\n                                    <tr key={index}>\n                                        <td>{poke1.base_stat}</td>\n                                        <td>{poke1.effort}</td>\n                                    </tr>\n                                )}\n                                </tbody>\n                            </table>\n                            <table>\n                                <thead>\n                                <tr>\n                                    <td>Base<br/><span>{pokemon2.name}</span></td>\n                                    <td>Effort<br/><span>{pokemon2.name}</span></td>\n                                </tr>\n                                </thead>\n                                {pokemon2.stats.map((poke2, index) =>\n                                    <tbody key={index}>\n                                    <tr>\n                                        <td>{poke2.base_stat}</td>\n                                        <td>{poke2.effort}</td>\n                                    </tr>\n                                    </tbody>\n                                )}\n                            </table>\n                        </div>\n                    </div>\n                </Fragment>\n            )\n        } else {\n           return <div className='loadingScreen'>Loading...</div>\n        }\n    }\n\n}\n\nexport default PokemonComparison","import React, {Component} from 'react';\nimport './_colors.scss'\nimport './_App.scss';\nimport Logo from \"../Logo/Logo\";\nimport {HashRouter, Switch, Route} from \"react-router-dom\";\nimport MainPage from '../MainPage/MainPage';\nimport SinglePokemonView from \"../SinglePokemonView/SinglePokemonView\";\nimport PokemonComparison from '../PokemonComparison/PokemonComparison'\n\nclass App extends Component {\n\n    render() {\n        return (\n            <div>\n                <Logo/>\n                <HashRouter>\n                    <Switch>\n                        <Route path=\"/\" exact component={MainPage}/>\n                        <Route path=\"/pokemon/:pokemonId\" component={SinglePokemonView}/>\n                        <Route path=\"/compare/:pokemonId1/:pokemonId2\" component={PokemonComparison}/>\n                    </Switch>\n                </HashRouter>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}